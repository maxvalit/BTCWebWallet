<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BlockchainStatus" xml:space="preserve">
    <value>Blockchain Status</value>
    <comment/>
  </data>
  <data name="Chain" xml:space="preserve">
    <value>Chain</value>
    <comment/>
  </data>
  <data name="Blocks" xml:space="preserve">
    <value>Blocks</value>
    <comment/>
  </data>
  <data name="Headers" xml:space="preserve">
    <value>Headers</value>
    <comment/>
  </data>
  <data name="Difficulty" xml:space="preserve">
    <value>Difficulty</value>
    <comment/>
  </data>
  <data name="MedianTime" xml:space="preserve">
    <value>Median Time</value>
    <comment/>
  </data>
  <data name="VerificationProgress" xml:space="preserve">
    <value>Verification Progress</value>
    <comment/>
  </data>
  <data name="InitialBlockDownload" xml:space="preserve">
    <value>Initial Block Download</value>
    <comment/>
  </data>
  <data name="SizeOnDisk" xml:space="preserve">
    <value>Size On Disk</value>
    <comment/>
  </data>
  <data name="Pruned" xml:space="preserve">
    <value>Pruned</value>
    <comment/>
  </data>
  <data name="PruneHeight" xml:space="preserve">
    <value>Prune Height</value>
    <comment/>
  </data>
  <data name="AutomaticPruning" xml:space="preserve">
    <value>Automatic Pruning</value>
    <comment/>
  </data>
  <data name="PruneTargetSize" xml:space="preserve">
    <value>Prune Target Size</value>
    <comment/>
  </data>
  <data name="Softforks" xml:space="preserve">
    <value>Softforks</value>
    <comment/>
  </data>
  <data name="Warnings" xml:space="preserve">
    <value>Warnings</value>
    <comment/>
  </data>
  <data name="ChainDesc" xml:space="preserve">
    <value>current network name (main, test, regtest)</value>
    <comment/>
  </data>
  <data name="BlocksDesc" xml:space="preserve">
    <value>the height of the most-work fully-validated chain. The genesis block has height 0</value>
    <comment/>
  </data>
  <data name="HeadersDesc" xml:space="preserve">
    <value>the current number of headers we have validated</value>
    <comment/>
  </data>
  <data name="DifficultyDesc" xml:space="preserve">
    <value>the current difficulty</value>
    <comment/>
  </data>
  <data name="MedianTimeDesc" xml:space="preserve">
    <value>median time for the current best block</value>
    <comment/>
  </data>
  <data name="VerificationProgressDesc" xml:space="preserve">
    <value>estimate of verification progress [0..1]</value>
    <comment/>
  </data>
  <data name="InitialBlockDownloadDesc" xml:space="preserve">
    <value>estimate of whether this node is in Initial Block Download mode</value>
    <comment/>
  </data>
  <data name="SizeOnDiskDesc" xml:space="preserve">
    <value>the estimated size of the block and undo files on disk</value>
    <comment/>
  </data>
  <data name="PrunedDesc" xml:space="preserve">
    <value>if the blocks are subject to pruning</value>
    <comment/>
  </data>
  <data name="PruneHeightDesc" xml:space="preserve">
    <value>lowest-height complete block stored</value>
    <comment/>
  </data>
  <data name="AutomaticPruningDesc" xml:space="preserve">
    <value>whether automatic pruning is enabled</value>
    <comment/>
  </data>
  <data name="PruneTargetSizeDesc" xml:space="preserve">
    <value>the target size used by pruning</value>
    <comment/>
  </data>
  <data name="SoftforksDesc" xml:space="preserve">
    <value>status of softforks</value>
    <comment/>
  </data>
  <data name="VLevel0" xml:space="preserve">
    <value>Level 0: reads the blocks from disk</value>
    <comment/>
  </data>
  <data name="VLevel1" xml:space="preserve">
    <value>Level 1: verifies block validity</value>
    <comment/>
  </data>
  <data name="VLevel2" xml:space="preserve">
    <value>Level 2: verifies undo data</value>
    <comment/>
  </data>
  <data name="VLevel3" xml:space="preserve">
    <value>Level 3: checks disconnection of tip blocks</value>
    <comment/>
  </data>
  <data name="VLevel4" xml:space="preserve">
    <value>Level 4: tries to reconnect the blocks</value>
    <comment/>
  </data>
  <data name="CheckLevel" xml:space="preserve">
    <value>Check Level</value>
    <comment/>
  </data>
  <data name="NBlocks" xml:space="preserve">
    <value>Blocks</value>
    <comment/>
  </data>
  <data name="VerifyChain" xml:space="preserve">
    <value>Verify Chain</value>
    <comment/>
  </data>
  <data name="ChainVerified" xml:space="preserve">
    <value>Chain Verified</value>
    <comment/>
  </data>
  <data name="ChainVerificationFailed" xml:space="preserve">
    <value>Chain Verification Failed. Please check logs.</value>
    <comment/>
  </data>
</root>