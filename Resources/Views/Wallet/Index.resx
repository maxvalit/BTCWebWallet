<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NoWallet" xml:space="preserve">
    <value>There is no wallet in this node.</value>
    <comment/>
  </data>
  <data name="Wallets" xml:space="preserve">
    <value>Wallets</value>
    <comment/>
  </data>
  <data name="CreateWallet" xml:space="preserve">
    <value>Create Wallet</value>
    <comment/>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
    <comment/>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
    <comment/>
  </data>
  <data name="Passphrase" xml:space="preserve">
    <value>Passphrase</value>
    <comment/>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Required</value>
    <comment/>
  </data>
  <data name="DisablePrivateKeys" xml:space="preserve">
    <value>Disable Private Keys</value>
    <comment/>
  </data>
  <data name="AvoidReuse" xml:space="preserve">
    <value>Avoid Reuse</value>
    <comment/>
  </data>
  <data name="Descriptors" xml:space="preserve">
    <value>Descriptors</value>
    <comment/>
  </data>
  <data name="LoadOnStartup" xml:space="preserve">
    <value>Load On Startup</value>
    <comment/>
  </data>
  <data name="PassphraseAgain" xml:space="preserve">
    <value>Confirm Passphrase</value>
    <comment/>
  </data>
  <data name="WalletNameDesc" xml:space="preserve">
    <value>The name for the new wallet</value>
    <comment/>
  </data>
  <data name="DisablePrivateKeysDesc" xml:space="preserve">
    <value>Disable the possibility of private keys (only watchonlys are possible in this mode)</value>
    <comment/>
  </data>
  <data name="BlankDesc" xml:space="preserve">
    <value>Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed</value>
    <comment/>
  </data>
  <data name="PassphraseDesc" xml:space="preserve">
    <value>Encrypt the wallet with this passphrase</value>
    <comment/>
  </data>
  <data name="AvoidReuseDesc" xml:space="preserve">
    <value>Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind</value>
    <comment/>
  </data>
  <data name="DescriptorsDesc" xml:space="preserve">
    <value>Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation</value>
    <comment/>
  </data>
  <data name="LoadOnStartupDesc" xml:space="preserve">
    <value>Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged</value>
    <comment/>
  </data>
</root>